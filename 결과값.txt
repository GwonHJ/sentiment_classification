import pandas as pd
import matplotlib.pyplot as plt
import konlpy
from konlpy.tag import Okt 
from keras.preprocessing.text import Tokenizer 
import numpy as np
from tensorflow.keras.models import load_model
from keras.layers import Embedding, Dense, LSTM, Dropout
from keras.models import Sequential 
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.preprocessing.sequence import pad_sequences 


okt = Okt()
stopwords = ['의', '가', '이', '은', '들', '는', '좀', '걍', '과', '도', '를', '으로', '자', '에', '와', '한', '하다']
max_words = 35000
tokenizer = Tokenizer(num_words = max_words)
max_len = 20 


loaded_model = load_model('/content/sample_data/best_model2.h5')

def sentiment_predict(new_sentence):
  new_sentence = okt.morphs(new_sentence, stem=True) # 토큰화
  new_sentence = [word for word in new_sentence if not word in stopwords] # 불용어 제거
  encoded = tokenizer.texts_to_sequences([new_sentence]) # 정수 인코딩
  pad_new = pad_sequences(encoded, maxlen = max_len) # 패딩
  score = loaded_model.predict(pad_new) # 예측
  max = np.argmax(score)

  
  if max == 0:
    print("부정")
  elif max == 1:
    print("중립")
  else :
    print("긍정")


    

temp_str = input()
sentiment_predict(temp_str)